{"project": "dolphin", "project_url": "https://dolphin-insar.readthedocs.io/", "show_commit_url": "https://github.com/isce-framework/dolphin/commit/", "hash_length": 8, "revision_to_hash": {"193": "734adbcde9f5bbe4de9e3ad7b7b67db0a3bf27f9", "344": "dabd0ea72ea1450cbf66369e8eeb470ce60e370f", "361": "d0360c3e78dcef59b7971590e784459ce17d2050", "535": "590026a7c12500cd87a3630b66a311196fda5cc5", "650": "5509c120cdba34d142e233b5e2b0c520f390d785", "651": "bc73745f506dec42d34ae20d58057fa9c2be6b03", "725": "a65b5b219474097082f2fd956e4a44bb18f68956", "857": "07114d43a2ad44d35c116ddbc4c5e9c9aba029fb", "912": "c46560474ede48b5563edea4593ef6d82c7a4778", "916": "62a60e181450c7c59ae20a0d3e5a41e8509f06cc", "917": "7a1f60d2eb7304b7dfa5acfdd6ad1b4848fb6ed6", "937": "6e5b504fb19221d53ca31b97cb7c1c8c7486392f", "962": "9e1b729e56883bf7bb8b0ee3920e1225ae6d4a6d", "1002": "ed1bb3cc6e7318029d8cd912d54dd3e0fc75f000", "1019": "11259950e6c3c99192e16257913936725138d43e", "1032": "ff6e4b0f878e271c92e285947b72b681249115ab", "1040": "f8695ee05fd020b27e728c27d879facecd7aa3de", "1041": "edabd8d763031f4983a444247b7a9b8bc030865a"}, "revision_to_date": {"193": 1670626985000, "344": 1674617859000, "361": 1674773153000, "535": 1679067232000, "650": 1680303449000, "651": 1680308234000, "725": 1683123738000, "857": 1690344371000, "912": 1692847710000, "916": 1693433381000, "917": 1693506117000, "937": 1694107653000, "962": 1694141034000, "1002": 1696383035000, "1019": 1696641483000, "1032": 1696901181000, "1040": 1696964075000, "1041": 1696964416000}, "params": {"arch": ["x86_64"], "cpu": ["AMD EPYC 7663 56-Core Processor"], "machine": ["aurora.jpl.nasa.gov"], "num_cpu": ["224"], "os": ["Linux 3.10.0-1160.59.1.el7.x86_64"], "ram": ["263857420"], "python": ["3.11"], "branch": ["main"]}, "graph_param_list": [{"arch": "x86_64", "cpu": "AMD EPYC 7663 56-Core Processor", "machine": "aurora.jpl.nasa.gov", "num_cpu": "224", "os": "Linux 3.10.0-1160.59.1.el7.x86_64", "ram": "263857420", "python": "3.11", "branch": "main"}], "benchmarks": {"benchmarks.CovarianceBenchmark.peakmem_covariance_stack": {"code": "class CovarianceBenchmark:\n    def peakmem_covariance_stack(self, nslc):\n        covariance.estimate_stack_covariance_cpu(\n            self.slc_stack, half_window=HALF_WINDOW, strides=STRIDES\n        )\n\n    def setup(self, nslc):\n        self.slc_samples = np.load(\"slc_samples.npy\")[:nslc, :]\n        self.slc_stack = self.slc_samples.reshape((nslc, *SHAPE))\n\n    def setup_cache(self):\n        # Run the several-second generation of samples once in setup_cache\n        # https://asv.readthedocs.io/en/v0.6.1/writing_benchmarks.html\n        np.save(\"slc_samples.npy\", _make_slc_samples())", "name": "benchmarks.CovarianceBenchmark.peakmem_covariance_stack", "param_names": ["nslc"], "params": [["10", "20", "30"]], "setup_cache_key": "benchmarks:36", "type": "peakmemory", "unit": "bytes", "version": "a76a1cd49dd9fbc8534a270fc9566a3dbada85d0df0f647d9dbda961c05cf7c9"}, "benchmarks.CovarianceBenchmark.time_covariance_single": {"code": "class CovarianceBenchmark:\n    def time_covariance_single(self, nslc):\n        # Test one covariance matrix on part of the samples\n        covariance.coh_mat_single(self.slc_samples[:, :200])\n\n    def setup(self, nslc):\n        self.slc_samples = np.load(\"slc_samples.npy\")[:nslc, :]\n        self.slc_stack = self.slc_samples.reshape((nslc, *SHAPE))\n\n    def setup_cache(self):\n        # Run the several-second generation of samples once in setup_cache\n        # https://asv.readthedocs.io/en/v0.6.1/writing_benchmarks.html\n        np.save(\"slc_samples.npy\", _make_slc_samples())", "min_run_count": 2, "name": "benchmarks.CovarianceBenchmark.time_covariance_single", "number": 0, "param_names": ["nslc"], "params": [["10", "20", "30"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "setup_cache_key": "benchmarks:36", "type": "time", "unit": "seconds", "version": "90d931fe1a2b8300d4b3a6aedcea1658c02ca2affc804b5182b361db36b1b2d8", "warmup_time": -1}, "benchmarks.CovarianceBenchmark.time_covariance_stack": {"code": "class CovarianceBenchmark:\n    def time_covariance_stack(self, nslc):\n        covariance.estimate_stack_covariance_cpu(\n            self.slc_stack, half_window=HALF_WINDOW, strides=STRIDES\n        )\n\n    def setup(self, nslc):\n        self.slc_samples = np.load(\"slc_samples.npy\")[:nslc, :]\n        self.slc_stack = self.slc_samples.reshape((nslc, *SHAPE))\n\n    def setup_cache(self):\n        # Run the several-second generation of samples once in setup_cache\n        # https://asv.readthedocs.io/en/v0.6.1/writing_benchmarks.html\n        np.save(\"slc_samples.npy\", _make_slc_samples())", "min_run_count": 2, "name": "benchmarks.CovarianceBenchmark.time_covariance_stack", "number": 0, "param_names": ["nslc"], "params": [["10", "20", "30"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "setup_cache_key": "benchmarks:36", "type": "time", "unit": "seconds", "version": "0c8eb3737272ef320ccbe94017ca799b977615bd42469a1debb8efa9994e14a8", "warmup_time": -1}, "benchmarks.PhaseLinkingBenchmark.peakmem_phase_link": {"code": "class PhaseLinkingBenchmark:\n    def peakmem_phase_link(self, nslc: int, use_evd: bool):\n        mle.run_mle(\n            self.slc_stack,\n            half_window=HALF_WINDOW,\n            strides=STRIDES,\n            use_evd=use_evd,\n        )\n\n    def setup(self, nslc: int, use_evd: bool):\n        self.slc_samples = np.load(\"slc_samples.npy\")[:nslc, :]\n        self.slc_stack = self.slc_samples.reshape((nslc, *SHAPE))\n\n    def setup_cache(self):\n        np.save(\"slc_samples.npy\", _make_slc_samples())", "name": "benchmarks.PhaseLinkingBenchmark.peakmem_phase_link", "param_names": ["nslc", "use_evd"], "params": [["10", "20", "30"], ["True", "False"]], "setup_cache_key": "benchmarks:67", "type": "peakmemory", "unit": "bytes", "version": "265fa9998eacd528614bf4900d83ad8711ff1ca5da21bdce12b80daba37acd3a"}, "benchmarks.PhaseLinkingBenchmark.time_phase_link": {"code": "class PhaseLinkingBenchmark:\n    def time_phase_link(self, nslc: int, use_evd: bool):\n        mle.run_mle(\n            self.slc_stack,\n            half_window=HALF_WINDOW,\n            strides=STRIDES,\n            use_evd=use_evd,\n        )\n\n    def setup(self, nslc: int, use_evd: bool):\n        self.slc_samples = np.load(\"slc_samples.npy\")[:nslc, :]\n        self.slc_stack = self.slc_samples.reshape((nslc, *SHAPE))\n\n    def setup_cache(self):\n        np.save(\"slc_samples.npy\", _make_slc_samples())", "min_run_count": 2, "name": "benchmarks.PhaseLinkingBenchmark.time_phase_link", "number": 0, "param_names": ["nslc", "use_evd"], "params": [["10", "20", "30"], ["True", "False"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "setup_cache_key": "benchmarks:67", "type": "time", "unit": "seconds", "version": "74d2e5f1d4986bb3876bdf27d1b8cc3aee3079a1bb4c0f3c4c56dfe92cd53b65", "warmup_time": -1}, "benchmarks.ShpBenchmark.time_estimate_neighbors": {"code": "class ShpBenchmark:\n    def time_estimate_neighbors(self):\n        shp.estimate_neighbors(\n            halfwin_rowcol=(HALF_WINDOW[\"y\"], HALF_WINDOW[\"x\"]),\n            alpha=0.001,\n            strides=STRIDES,\n            mean=self.amp_mean,\n            var=self.amp_variance,\n            nslc=30,\n            method=shp.ShpMethod.GLRT,\n        )\n\n    def setup(self):\n        self.nslc = 30\n        slc_samples = _make_slc_samples()\n        slc_stack = slc_samples.reshape((self.nslc, *SHAPE))\n    \n        self.amp_mean = np.mean(np.abs(slc_stack), axis=0)\n        self.amp_variance = np.var(np.abs(slc_stack), axis=0)", "min_run_count": 2, "name": "benchmarks.ShpBenchmark.time_estimate_neighbors", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "ec69f3b1defe2738bfdd2e802a39d3032e494527fc08256fd09098da80087465", "warmup_time": -1}}, "machines": {"aurora.jpl.nasa.gov": {"arch": "x86_64", "cpu": "AMD EPYC 7663 56-Core Processor", "machine": "aurora.jpl.nasa.gov", "num_cpu": "224", "os": "Linux 3.10.0-1160.59.1.el7.x86_64", "ram": "263857420", "version": 1}}, "tags": {"v0.1.0": 650, "v0.1.1": 651, "v0.2.0": 857, "v0.3.0": 912, "v0.3.1": 916, "v0.3.2": 917, "v0.4.0": 937, "v0.4.1": 962, "v0.4.2": 1002, "v0.4.3": 1019, "v0.5.0": 1032, "v0.5.1": 1040, "v0.0.1": 193, "v0.0.2": 344, "v0.0.3": 361, "v0.0.4": 535, "v0.1.2": 725}, "pages": [["", "Grid view", "Display as a agrid"], ["summarylist", "List view", "Display as a list"], ["regressions", "Show regressions", "Display information about recent regressions"]]}